kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config-rhdh
data:
  app-config-rhdh.yaml: |
    app:
      title: Contract-First IDP
      baseUrl: "https://backstage-backstage-developer-hub.{{ .Values.clusterRouterDomain }}"
    mta:
    url: https://mta-openshift-mta.apps.cluster-2mn8w.dynamic.redhatworkshops.io 
    backendPluginVersion: "0.3.0"
    backendPluginRoot: "/opt/app-root/src/dynamic-plugins-root/backstage-community-backstage-plugin-mta-backend-0.3.0"
    providerAuth:
      realm: mta
      secret: backstage-provider-secret
      clientID: backstage-provider

    dynamicPlugins:
      frontend: 
        ianbolton.backstage-plugin-mta-frontend:
          entityTabs:
            - path: /mta
              title: MTA
              mountPoint: entity.page.mta
          mountPoints:
            - mountPoint: entity.page.mta/cards
              importName: EntityMTAContent
              config:
                layout:
                  gridColumn:
                    lg: 'span 12'
                    md: 'span 8'
                    xs: 'span 6'
                if:
                  allOf:
                    - isKind: component 
                    - isType: service
    
    backend:
      auth:
        keys:
          - secret: ${BACKEND_SECRET}
      baseUrl: "https://backstage-backstage-developer-hub.{{ .Values.clusterRouterDomain }}"
      cors:
        origin: "https://backstage-backstage-developer-hub.{{ .Values.clusterRouterDomain }}"

    signInPage: oidc

    auth:
      session:
        secret: {{ .Values.auth.sessionSecret }}
      environment: production
      providers:
        oidc:
          production:
            clientId: ${KEYCLOAK_CLIENT_ID}
            clientSecret: ${KEYCLOAK_CLIENT_SECRET}
            metadataUrl: ${KEYCLOAK_BASE_URL}/realms/${KEYCLOAK_REALM}/.well-known/openid-configuration
            prompt: auto

    integrations:
      github:
        - host: github.com
          token: ${GIT_TOKEN}

    kubernetes:
      clusterLocatorMethods:
        - clusters:
          - authProvider: serviceAccount
            name: ${K8S_CLUSTER_NAME}
            serviceAccountToken: ${token}
            url: ${K8S_CLUSTER_URL}
            skipTLSVerify: true
          type: config
      customResources:
        # to view the Tekton PipelineRuns list in the side panel
        # and to view the latest PipelineRun status in the Topology node decorator:
        - group: 'tekton.dev'
          apiVersion: 'v1'
          plural: 'pipelines'
        - group: 'tekton.dev'
          apiVersion: 'v1'
          plural: 'pipelineruns'
        - group: 'tekton.dev'
          apiVersion: 'v1'
          plural: 'taskruns'
        - group: 'org.eclipse.che'
          apiVersion: 'v2'
          plural: 'checlusters'
        - group: 'route.openshift.io'
          apiVersion: 'v1'
          plural: 'routes'
      serviceLocatorMethod:
          type: multiTenant
    enabled:
      github: true
      githubOrg: true
      kubernetes: true

    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, Group, Resource, Location, Template, API, Domain]
      locations:
        - type: file
          target: /extraFiles/catalog-info.yaml
      providers:
        keycloakOrg:
          production:
            baseUrl: ${KEYCLOAK_BASE_URL}
            loginRealm: ${KEYCLOAK_REALM}
            realm: ${KEYCLOAK_REALM}
            clientId: ${KEYCLOAK_CLIENT_ID}
            clientSecret: ${KEYCLOAK_CLIENT_SECRET}
            filters:
              kind:
                - Group
                - User
            schedule:
              frequency: { minutes: 1 }
              timeout: { minutes: 1 }
              initialDelay: { seconds: 15 }
        github:
          templates:
            organization: '{{ .Values.git.org }}'
            catalogPath: '/templates/**/*template.yaml'
            filters:
              branch: 'main'
              repository: 'software-templates'
              kind:
                - Template
            schedule: # optional
              frequency: { seconds: 15 }
              timeout: { minutes: 1 }
              initialDelay: { seconds: 15 }
          userWorkloads:
            organization: '{{ .Values.git.org }}'
            catalogPath: '/catalog-info.yaml'
            filters:
              branch: 'main'
              repository: '.*'
              kind:
                - System
                - Api
                - Component
            schedule: # optional
              frequency: { minutes: 1 }
              timeout: { minutes: 1 }
              initialDelay: { seconds: 15 }